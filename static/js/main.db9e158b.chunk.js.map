{"version":3,"sources":["component/progressbar.js","component/button.js","component/selectbar.js","component/App.js","serviceWorker.js","index.js"],"names":["ProgressBar","react_default","a","createElement","this","props","percent","map","bar","key","className","style","max-width","width","background-color","box-sizing","border-top-right-radius","border-bottom-right-radius","Component","Button","e","console","log","onClick","_this","buttons","button","handleClick","SelectBar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","setState","target","onChange","_this2","name","handleSelect","bars","index","App","limit","updbar","fetch","method","headers","Content-Type","then","res","json","arrbarpercent","Math","round","Number","window","location","reload","progress","updateprogress","arrpercent","progressbar_ProgressBar","selectbar_SelectBar","b","button_Button","p","loaddata","Boolean","hostname","match","ReactDOM","render","component_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db9e158b.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class ProgressBar extends Component{\n\n  render(){\n    return(\n      <div>\n      {this.props.percent.map( (bar) => (\n                          <div key={bar} className=\"divprogressbarbg\">\n                            <div className=\"divprogressbar\" style={{\"max-width\":\"100%\",width:(bar > 95) ? '95%' : bar+'%',\"background-color\":(bar > 100) ? \"red\" : \"rgb(43,194,83)\",\"box-sizing\":\"border-box\",\n                            \"border-top-right-radius\": (bar > 100) ? \"20px\" : \"8px\", \"border-bottom-right-radius\":(bar > 100) ? \"20px\" : \"8px\"}}>\n\n                            </div>\n                            <span >{bar+'%'}</span>\n                          </div>\n\n                      ))}\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nexport default class Button extends Component{\n  handleClick(e){\n    console.log(e);\n    this.props.onClick(e)\n  }\n  render(){\n    return(\n      <div className=\"buttondiv\">\n      {this.props.buttons.map( (button) => (\n\n                          <button className=\"btnnew btn-primary\" key={button} onClick={() => this.handleClick(button)}>{button}</button>\n                      ))}\n\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nexport default class SelectBar extends Component{\n  constructor(){\n    super();\n    this.state = {\n      value:\"\"\n    }\n  }\n  handleSelect(e){\n    // alert(e)\n    this.setState({value:e.target.value});\n    // console.log(e);\n    this.props.onChange(e.target.value);\n\n  }\n  render(){\n    return(\n      <select name=\"progress\" onChange={(e) => this.handleSelect(e)} value={this.state.value} className=\"select mL10\">\n      {this.props.bars.map( (bar,index) => (\n\n                          <option key={bar} value={index}>{\"progressbar \" + (index+1)}</option>\n                      ))}\n      </select>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ProgressBar from './progressbar';\nimport Button from './button';\nimport SelectBar from './selectbar';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      bars:[],\n      buttons:[],\n      limit:0,\n      percent:[],\n      style:\"{background-color : green,width:50%}\",\n      updbar:0\n    }\n    const fetchapi = () => {\n      fetch(\"http://pb-api.herokuapp.com/bars\",\n            { method: 'GET',\n              headers: {\"Content-Type\" : \"application/json\"}\n              }).then(res => res.json()).then(res => {\n                 // console.log(res);\n                 this.setState({bars:res.bars});\n                 this.setState({buttons:res.buttons});\n                 this.setState({limit:res.limit});\n                 const arrbarpercent = this.state.bars.map( (bar) => {\n                   return Math.round((bar * 100) / Number(this.state.limit))\n                 });\n                 console.log(arrbarpercent);\n                 this.setState({percent:arrbarpercent});\n             });\n    }\n    fetchapi();\n  }\n  loaddata(){\n    window.location.reload();\n  }\n  handleSelect(bar){\n    this.setState({updbar:bar});\n  }\n  handleClick(progress){\n    this.updateprogress(progress,this.state.updbar);\n  }\n  updateprogress(progress,bar){\n    let arrpercent = this.state.percent;\n    arrpercent[bar] = (arrpercent[bar] + progress < 0) ? 0 : arrpercent[bar] + progress;\n    // this.setState({bars:arrpercent});\n    // const arrbarpercent = this.state.bars.map( (bar) => {\n    //   return Math.round((bar * 100) / Number(this.state.limit))\n    // });\n    console.log(arrpercent);\n    this.setState({percent:arrpercent});\n  }\n  render() {\n    return (\n      <div className=\"container col-4 bg-color\">\n        <h1>Progress Bar</h1>\n        <ProgressBar percent={this.state.percent}/>\n        <SelectBar bars={this.state.bars} onChange={(b) => this.handleSelect(b)}/>\n        <Button buttons={this.state.buttons} onClick={(p) => this.handleClick(p)}/>\n        <button className=\"btnnew btn-primary\" onClick={() => this.loaddata()}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}